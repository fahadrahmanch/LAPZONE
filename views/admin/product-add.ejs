<!DOCTYPE HTML>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Evara Dashboard</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:title" content="">
    <meta property="og:type" content="">
    <meta property="og:url" content="">
    <meta property="og:image" content="">
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="assets/imgs/theme/favicon.svg">
    <!-- Template CSS -->
    <link href="assets/css/main.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">

</head>

<body>
    <div class="screen-overlay"></div>
    <aside class="navbar-aside" id="offcanvas_aside">
        <div class="aside-top">
            <a href="index.html" class="brand-wrap">
                <img src="assets/imgs/theme/logo.svg" class="logo" alt="Evara Dashboard">
            </a>
            <div>
                <button class="btn btn-icon btn-aside-minimize"> <i class="text-muted material-icons md-menu_open"></i>
                </button>
            </div>
        </div>
        <nav>
            <ul class="menu-aside">
                <li class="menu-item">
                    <a class="menu-link" href="/admin/Dashboard"> <i class="icon material-icons md-home"></i>
                        <span class="text">Dashboard</span>
                    </a>
                </li>
                <li class="menu-item active ">
                    <a class="menu-link" href="/admin/products"> <i class="icon material-icons md-shopping_bag"></i>
                        <span class="text">Products</span>
                    </a>

                </li>
                <!-- <li class="menu-item ">
                    <a class="menu-link" href="page-orders-1.html"> <i class="icon material-icons md-shopping_cart"></i>
                        <span class="text">Orders</span>
                    </a>
                   
                </li> -->
                <li class="menu-item ">
                    <a class="menu-link" href="/admin/categories"> <i class="icon material-icons md-stars"></i></i>
                        <span class="text">Category</span>
                    </a>

                </li>
                <li class="menu-item ">
                    <a class="menu-link" href="/admin/users"> <i class="icon material-icons md-store"></i>
                        <span class="text">Users</span>
                    </a>

                </li>
                <li class="menu-item  ">
                    <a class="menu-link" href="/admin/orders"> <i class="icon material-icons md-shopping_cart"></i>
                        <span class="text">Orders</span>
                    </a>
                   
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/coupen">
                        <i class="icon material-icons md-local_offer"></i>
                        <span class="text">Coupon</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/brand"> <i class="icon material-icons md-stars"></i>
                        <span class="text">Brands</span> </a>
                </li>
            </ul>
            <hr>
        </nav>
    </aside>
    <main class="main-wrap">
        <header class="main-header navbar">
            <div class="col-search">
                <form class="searchform">
                    <!-- <div class="input-group">
                        <input list="search_terms" type="text" class="form-control" placeholder="Search term">
                        <button class="btn btn-light bg" type="button"> <i
                                class="material-icons md-search"></i></button>
                    </div> -->
                    <!-- <datalist id="search_terms">
                        <option value="Products">
                        <option value="New orders">
                        <option value="Apple iphone">
                        <option value="Ahmed Hassan">
                    </datalist> -->
                </form>
            </div>
            <div class="col-nav">
                <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside"> <i
                        class="material-icons md-apps"></i> </button>
                <ul class="nav">
                    <!-- <li class="nav-item">
                        <a class="nav-link btn-icon" href="#">
                            <i class="material-icons md-notifications animation-shake"></i>
                            <span class="badge rounded-pill">3</span>
                        </a>
                    </li> -->
                    <li class="nav-item">
                        <a class="nav-link btn-icon darkmode" href="#"> <i class="material-icons md-nights_stay"></i>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="requestfullscreen nav-link btn-icon"><i
                                class="material-icons md-cast"></i></a>
                    </li>
                    <li class="dropdown nav-item">
                        <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownLanguage"
                            aria-expanded="false"><i class="material-icons md-public"></i></a>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownLanguage">
                            <a class="dropdown-item text-brand" href="#"><img src="assets/imgs/theme/flag-us.png"
                                    alt="English">English</a>
                            <a class="dropdown-item" href="#"><img src="assets/imgs/theme/flag-fr.png"
                                    alt="Français">Français</a>
                            <a class="dropdown-item" href="#"><img src="assets/imgs/theme/flag-jp.png"
                                    alt="Français">日本語</a>
                            <a class="dropdown-item" href="#"><img src="assets/imgs/theme/flag-cn.png"
                                    alt="Français">中国人</a>
                        </div>
                    </li>
                    <li class="dropdown nav-item">
                        <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownAccount"
                            aria-expanded="false"> <img class="img-xs rounded-circle"
                                src="assets/imgs/people/avatar2.jpg" alt="User"></a>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownAccount">
                            <a class="dropdown-item" href="#"><i class="material-icons md-perm_identity"></i>Edit
                                Profile</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-settings"></i>Account
                                Settings</a>
                            <a class="dropdown-item" href="#"><i
                                    class="material-icons md-account_balance_wallet"></i>Wallet</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-receipt"></i>Billing</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-help_outline"></i>Help
                                center</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item text-danger" href="/admin/logout"><i
                                    class="material-icons md-exit_to_app"></i>Logout</a>
                        </div>
                    </li>
                </ul>
            </div>
        </header>
        <section class="content-main">
            <div class="row">
                <div class="col-12">
                    <div class="content-header">
                        <h2 class="content-title">Add New Product</h2>
                    </div>
                    
                    <div class="card mb-4">
                        <div class="card-body">
                            <form method="POST" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateAndSubmit()">
                                <!-- Basic Information -->
                                <div class="row">
                                    <div class="col-md-6 mb-4">
                                        <label for="product_name" class="form-label">Product Name</label>
                                        <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name">
                                        <div id="productName-error" class="error-message text-danger"></div>
                                    </div>
                                    
                                    <div class="col-md-3 mb-4">
                                        <label class="form-label">Category</label>
                                        <select class="form-select" name="category">
                                            <option value="" selected></option>
                                            <%for(let i=0;i<cat.length;i++){%>
                                                <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                                            <%}%>
                                        </select>
                                        <div id="category-error" class="error-message text-danger"></div>
                                    </div>
                                    
                                    <div class="col-md-3 mb-4">
                                        <label class="form-label">Brand</label>
                                        <select class="form-select" name="brand">
                                            <option value="" selected></option>
                                            <%for(let i=0;i<brand.length;i++){%>
                                                <option value="<%= brand[i].brandName %>"><%= brand[i].brandName %></option>
                                            <%}%>
                                        </select>
                                        <div id="brand-error" class="error-message text-danger"></div>
                                    </div>
                                </div>
        
                                <div class="row">
                                    <div class="col-12 mb-4">
                                        <label class="form-label">Full description</label>
                                        <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control" rows="4"></textarea>
                                        <div id="description-error" class="error-message text-danger"></div>
                                    </div>
                                </div>
        
                                <!-- Variants Section -->
                                <div class="row">
                                    <div class="col-12">
                                        <h4 class="mb-3">Product Variants</h4>
                                        <div id="variantsContainer">
                                            <div class="variant-section card p-3 mb-3">
                                                <h5>Variant 1</h5>
                                                <div class="row">
                                                    <div class="col-md-4 mb-3">
                                                        <label for="ram-0" class="form-label">RAM</label>
                                                        <input type="text" class="form-control" name="variants[0][ram]" id="ram-0" placeholder="Enter RAM (e.g., 8GB)">
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="storage-0" class="form-label">Storage</label>
                                                        <input type="text" class="form-control" name="variants[0][storage]" id="storage-0" placeholder="Enter Storage (e.g., 512GB SSD)">
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="processor-0" class="form-label">Processor</label>
                                                        <input type="text" class="form-control" name="variants[0][processor]" id="processor-0" placeholder="Enter Processor (e.g., Intel i5)">
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-4 mb-3">
                                                        <label for="regularPrice-0" class="form-label">Regular Price</label>
                                                        <input type="number" class="form-control" name="variants[0][regularPrice]" id="regularPrice-0" placeholder="Enter regular price">
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="salePrice-0" class="form-label">Sale Price</label>
                                                        <input type="number" class="form-control" name="variants[0][salePrice]" id="salePrice-0" placeholder="Enter sale price">
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="stock-0" class="form-label">Stock</label>
                                                        <input type="number" class="form-control" name="variants[0][stock]" id="stock-0" placeholder="Enter stock quantity">
                                                    </div>
                                                </div>
                                                <button type="button" class="btn btn-danger btn-sm align-self-start remove-variant-btn">Remove Variant</button>
                                            </div>
                                        </div>
                                        <button type="button" class="btn btn-secondary mb-4" id="addVariantBtn">Add Another Variant</button>
                                    </div>
                                </div>
        
                                <!-- Images Section -->
                                <div class="row">
                                    <div class="col-12">
                                        <div class="card mb-4">
                                            <div class="card-header">
                                                <h4>Product Images</h4>
                                            </div>
                                            <div class="card-body">
                                                <div id="addedImagesContainer" class="row mb-3"></div>
                                                <div class="row">
                                                    <% for(let i = 1; i <= 4; i++) { %>
                                                    <div class="col-md-3 mb-3">
                                                        <div class="image-upload-container">
                                                            <img src="" alt="" id="imgView<%= i %>" class="img-preview mb-2">
                                                            <input class="form-control" type="file" name="images" id="input<%= i %>"
                                                                accept="image/png, image/jpeg, image/jpg"
                                                                onchange="viewImage<%= i %>(event), viewImage(event, <%= i %>)">
                                                        </div>
                                                    </div>
                                                    <% } %>
                                                </div>
                                                <div id="images-error" class="error-message text-danger"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
        
                                <!-- Submit Button -->
                                <div class="row">
                                    <div class="col-12">
                                        <button class="btn btn-primary w-100" type="submit">Publish Product</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <script>
            document.addEventListener("DOMContentLoaded", () => {
              let variantCount = 1; // Start at 1 since the first variant is already there
          
              const addVariantBtn = document.getElementById("addVariantBtn");
              const variantsContainer = document.getElementById("variantsContainer");
          
              addVariantBtn.addEventListener("click", () => {
                const newVariant = document.createElement("div");
                newVariant.className = "variant-section";
                newVariant.innerHTML = `
                  <h5>Variant ${variantCount + 1}</h5>
                  <div class="mb-3">
                    <label for="ram-${variantCount}" class="form-label">RAM</label>
                    <input type="text" class="form-control" name="variants[${variantCount}][ram]" id="ram-${variantCount}" placeholder="Enter RAM (e.g., 8GB)">
                  </div>
                  <div class="mb-3">
                    <label for="storage-${variantCount}" class="form-label">Storage</label>
                    <input type="text" class="form-control" name="variants[${variantCount}][storage]" id="storage-${variantCount}" placeholder="Enter Storage (e.g., 512GB SSD)">
                  </div>
                  <div class="mb-3">
                    <label for="processor-${variantCount}" class="form-label">Processor</label>
                    <input type="text" class="form-control" name="variants[${variantCount}][processor]" id="processor-${variantCount}" placeholder="Enter Processor (e.g., Intel i5)">
                  </div>
                  <div class="row g-3">
                    <div class="col-md-6">
                      <label for="regularPrice-${variantCount}" class="form-label">Regular Price</label>
                      <input type="number" class="form-control" name="variants[${variantCount}][regularPrice]" id="regularPrice-${variantCount}" placeholder="Enter regular price" required>
                    </div>
                    <div class="col-md-6">
                      <label for="salePrice-${variantCount}" class="form-label">Sale Price</label>
                      <input type="number" class="form-control" name="variants[${variantCount}][salePrice]" id="salePrice-${variantCount}" placeholder="Enter sale price" required>
                    </div>
                  </div>
                  <div class="mb-3 mt-3">
                    <label for="stock-${variantCount}" class="form-label">Stock</label>
                    <input type="number" class="form-control" name="variants[${variantCount}][stock]" id="stock-${variantCount}" placeholder="Enter stock quantity" required>
                  </div>
                  <button type="button" class="btn btn-danger btn-sm remove-variant-btn">Remove Variant</button>
                `;
                variantsContainer.appendChild(newVariant);
                variantCount++; // Increment only once after adding a new variant
              });
          
              variantsContainer.addEventListener("click", (e) => {
                if (e.target.classList.contains("remove-variant-btn")) {
                  e.target.closest(".variant-section").remove();
                }
              });
            });
          </script>
          

      
        
        
        <script>
//            function validateAndSubmit() {
//     // Clear all previous error messages
//     const errorElements = document.querySelectorAll('.error-message');
//     errorElements.forEach(element => element.innerHTML = '');

//     let isValid = true;

//     // Validate Product Name
//     const productName = document.getElementById('product_name').value;
//     if (!productName.trim()) {
//         document.getElementById('productName-error').innerHTML = 'Product name is required';
//         isValid = false;
//     }

//     // Validate Description
//     const description = document.getElementById('descriptionid').value;
//     if (!description.trim()) {
//         document.getElementById('description-error').innerHTML = 'Description is required';
//         isValid = false;
//     }

//     // Validate Variants
//     const variantSections = document.querySelectorAll('.variant-section');
//     if (variantSections.length === 0) {
//         alert('At least one variant is required');
//         isValid = false;
//     }

//     // Validate each variant
//     variantSections.forEach((section, index) => {
//         // RAM validation
//         const ram = section.querySelector(`#ram-${index}`).value;
//         if (!ram.trim()) {
//             section.querySelector(`#ram-${index}`).insertAdjacentHTML(
//                 'afterend',
//                 `<div class="error-message" style="color: red;">RAM is required</div>`
//             );
//             isValid = false;
//         }

//         // Processor validation
//         const processor = section.querySelector(`#processor-${index}`).value;
//         if (!processor.trim()) {
//             section.querySelector(`#processor-${index}`).insertAdjacentHTML(
//                 'afterend',
//                 `<div class="error-message" style="color: red;">Processor is required</div>`
//             );
//             isValid = false;
//         }

//         // Storage validation
//         const storage = section.querySelector(`#storage-${index}`).value;
//         if (!storage.trim()) {
//             section.querySelector(`#storage-${index}`).insertAdjacentHTML(
//                 'afterend',
//                 `<div class="error-message" style="color: red;">Storage is required</div>`
//             );
//             isValid = false;
//         }

//         // Regular Price validation
//         const regularPrice = section.querySelector(`#regularPrice-${index}`).value;
//         if (!regularPrice || regularPrice <= 0) {
//             section.querySelector(`#regularPrice-${index}`).closest('.col-md-6').insertAdjacentHTML(
//                 'beforeend',
//                 `<div class="error-message" style="color: red;">Valid regular price is required</div>`
//             );
//             isValid = false;
//         }

//         // Sale Price validation
//         const salePrice = section.querySelector(`#salePrice-${index}`).value;
//         if (salePrice && Number(salePrice) >= Number(regularPrice)) {
//             section.querySelector(`#salePrice-${index}`).closest('.col-md-6').insertAdjacentHTML(
//                 'beforeend',
//                 `<div class="error-message" style="color: red;">Sale price must be less than regular price</div>`
//             );
//             isValid = false;
//         }

//         // Stock validation
//         const stock = section.querySelector(`#stock-${index}`).value;
//         if (!stock || stock < 0) {
//             section.querySelector(`#stock-${index}`).insertAdjacentHTML(
//                 'afterend',
//                 `<div class="error-message" style="color: red;">Valid stock quantity is required</div>`
//             );
//             isValid = false;
//         }
//     });

//     // Image validation
//     const imageInputs = document.querySelectorAll('input[type="file"][name="images"]');
//     let hasImage = false;
//     imageInputs.forEach(input => {
//         if (input.files.length > 0) {
//             hasImage = true;
//         }
//     });

//     if (!hasImage) {
//         document.getElementById('images-error').innerHTML = 'At least one image is required';
//         isValid = false;
//     }

//     // Prevent form submission if validation fails
//     if (!isValid) {
//         alert('Please correct the errors before submitting.');
//     }

//     return isValid;
// }

function validateAndSubmit() {
    clearErrors();
    let isValid = true;

    // Basic Information Validation
    isValid = validateBasicInfo() && isValid;
    
    // Variants Validation
    isValid = validateVariants() && isValid;
    
    // Images Validation
    isValid = validateImages() && isValid;

    return isValid;
}

function clearErrors() {
    document.querySelectorAll('.error-message').forEach(element => {
        element.innerHTML = '';
    });
    document.querySelectorAll('.is-invalid').forEach(element => {
        element.classList.remove('is-invalid');
    });
}

function showError(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.innerHTML = message;
        const inputElement = document.getElementById(elementId.replace('-error', ''));
        if (inputElement) {
            inputElement.classList.add('is-invalid');
        }
    }
}

function validateBasicInfo() {
    let isValid = true;

    // Product Name
    const productName = document.getElementById('product_name').value;
    if (!productName.trim()) {
        showError('productName-error', 'Product name is required');
        isValid = false;
    }

    // Category
    const category = document.querySelector('select[name="category"]').value;
    if (!category) {
        showError('category-error', 'Category is required');
        isValid = false;
    }

    // Brand
    const brand = document.querySelector('select[name="brand"]').value;
    if (!brand) {
        showError('brand-error', 'Brand is required');
        isValid = false;
    }

    // Description
    const description = document.getElementById('descriptionid').value;
    if (!description.trim()) {
        showError('description-error', 'Description is required');
        isValid = false;
    }

    return isValid;
}

function validateVariants() {
    let isValid = true;
    const variantSections = document.querySelectorAll('.variant-section');

    if (variantSections.length === 0) {
    Swal.fire({
        icon: 'warning',
        title: 'Oops...',
        text: 'At least one variant is required'
    });
    return false;
}


    variantSections.forEach((section, index) => {
        // Validate RAM
        const ram = section.querySelector(`#ram-${index}`).value;
        if (!ram.trim()) {
            addVariantError(section, `ram-${index}`, 'RAM is required');
            isValid = false;
        }

        // Validate Storage
        const storage = section.querySelector(`#storage-${index}`).value;
        if (!storage.trim()) {
            addVariantError(section, `storage-${index}`, 'Storage is required');
            isValid = false;
        }

        // Validate Processor
        const processor = section.querySelector(`#processor-${index}`).value;
        if (!processor.trim()) {
            addVariantError(section, `processor-${index}`, 'Processor is required');
            isValid = false;
        }

        // Validate Prices
        const regularPrice = section.querySelector(`#regularPrice-${index}`).value;
        const salePrice = section.querySelector(`#salePrice-${index}`).value;

        if (!regularPrice || regularPrice <= 0) {
            addVariantError(section, `regularPrice-${index}`, 'Valid regular price is required');
            isValid = false;
        }

        if (salePrice && Number(salePrice) > Number(regularPrice)) {
            addVariantError(section, `salePrice-${index}`, 'Sale price must be less than regular price');
            isValid = false;
        }

        // Validate Stock
        const stock = section.querySelector(`#stock-${index}`).value;
        if (!stock || stock < 0) {
            addVariantError(section, `stock-${index}`, 'Valid stock quantity is required');
            isValid = false;
        }
    });

    return isValid;
}

function addVariantError(section, inputId, message) {
    const input = section.querySelector(`#${inputId}`);
    input.classList.add('is-invalid');
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message text-danger mt-1';
    errorDiv.innerHTML = message;
    input.parentNode.appendChild(errorDiv);
}

function validateImages() {
    const imageInputs = document.querySelectorAll('input[type="file"][name="images"]');
    let hasImage = false;

    imageInputs.forEach(input => {
        if (input.files.length > 0) {
            hasImage = true;
        }
    });

    if (!hasImage) {
        showError('images-error', 'At least one product image is required');
        return false;
    }

    return true;
}

// Add event listeners for dynamic variant addition
// document.getElementById('addVariantBtn').addEventListener('click', function() {
//     const variantsContainer = document.getElementById('variantsContainer');
//     const variantCount = variantsContainer.children.length;
    
//     // Clone the first variant section and update its IDs and labels
//     const newVariant = variantsContainer.children[0].cloneNode(true);
//     newVariant.querySelector('h5').textContent = `Variant ${variantCount + 1}`;
    
//     // Update all IDs and names in the new variant
//     updateVariantIds(newVariant, variantCount);
    
//     // Clear all input values
//     newVariant.querySelectorAll('input').forEach(input => {
//         input.value = '';
//         input.classList.remove('is-invalid');
//     });
    
//     // Clear any error messages
//     newVariant.querySelectorAll('.error-message').forEach(error => error.remove());
    
//     variantsContainer.appendChild(newVariant);
// });

function updateVariantIds(variantElement, index) {
    const inputs = variantElement.querySelectorAll('input');
    inputs.forEach(input => {
        const oldId = input.id;
        const newId = oldId.replace(/\d+/, index);
        input.id = newId;
        input.name = input.name.replace(/\[\d+\]/, `[${index}]`);
        
        const label = variantElement.querySelector(`label[for="${oldId}"]`);
        if (label) {
            label.setAttribute('for', newId);
        }
    });
}

// Handle variant removal
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('remove-variant-btn')) {
        const variantsContainer = document.getElementById('variantsContainer');
        if (variantsContainer.children.length > 1) {
            e.target.closest('.variant-section').remove();
            // Update variant numbers
            variantsContainer.querySelectorAll('.variant-section').forEach((section, index) => {
                section.querySelector('h5').textContent = `Variant ${index + 1}`;
                updateVariantIds(section, index);
            });
        } else {
            alert('At least one variant is required');
        }
    }
});
const style = document.createElement('style');
style.textContent = `
    .error-message {
        color: red;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
`;
document.head.appendChild(style);
           
       

            function viewImage(event, index) {
                const input = event.target;
                const reader = new FileReader();
                reader.onload = function () {
                    const dataURL = reader.result;
                    const image = document.getElementById("imgView" + index);
                    image.src = dataURL;

                    // Initialize cropper
                    const cropper = new Cropper(image, {
                        aspectRatio: 1,
                        guides: true,
                        background: false,
                        autoCropArea: 1,
                        zoomable: true,
                    });

                    const cropperContainer = document.querySelector("#croppedImg" + index).parentNode;
                    cropperContainer.style.display = "block";

                    const saveButton = document.querySelector("#saveButton" + index);
                    saveButton.addEventListener("click", async function () {
                        const croppedCanvas = cropper.getCroppedCanvas();
                        const croppedImage = document.getElementById("croppedImg" + index);
                        croppedImage.src = croppedCanvas.toDataURL("image/jpeg", 1.0);

                        const timestamp = new Date().getTime();
                        const fileName = `cropped-img-${timestamp}-${index}.png`;

                        await croppedCanvas.toBlob((blob) => {
                            const input = document.getElementById("input" + index);
                            const imgFile = new File([blob], fileName, { type: "image/png" });

                            const fileList = new DataTransfer();
                            fileList.items.add(imgFile);
                            input.files = fileList.files;
                        });

                        cropperContainer.style.display = "none";
                        cropper.destroy();
                    });
                };

                reader.onerror = function () {
                    // alert("Failed to read the image file.");
                };

                reader.readAsDataURL(input.files[0]);
            }

            document.querySelectorAll('input[type="file"]').forEach((input) => {
                input.addEventListener("change", (event) => {
                    const index = input.id.replace("input", "");
                    viewImage(event, index);
                });
            });

            const selectedImages = [];
            function handleFileSelect(event) {
                const addedImagesContainer = document.getElementById("addedImagesContainer");
                addedImagesContainer.innerHTML = "";
                const files = event.target.files;

                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    selectedImages.push(file);

                    const thumbnail = document.createElement("div");
                    thumbnail.classList.add("thumbnail");

                    const img = document.createElement("img");
                    img.src = URL.createObjectURL(file);
                    img.alt = "thumbnail";
                    img.style.width = "50px";
                    img.style.height = "auto";

                    const removeIcon = document.createElement("span");
                    removeIcon.classList.add("remove-icon");
                    removeIcon.innerHTML = "&times;";
                    removeIcon.addEventListener("click", function () {
                        const index = selectedImages.indexOf(file);
                        if (index !== -1) {
                            selectedImages.splice(index, 1);
                        }
                        thumbnail.remove();
                    });

                    thumbnail.appendChild(img);
                    thumbnail.appendChild(removeIcon);
                    addedImagesContainer.appendChild(thumbnail);
                }
            }
        </script>
        <footer class="main-footer font-xs">
            <div class="row pb-30 pt-15">
                <div class="col-sm-6">
                    <script>
                        document.write(new Date().getFullYear())
                    </script> ©, Evara - HTML Ecommerce Template .
                </div>
                <div class="col-sm-6">
                    <div class="text-sm-end">
                        All rights reserved
                    </div>
                </div>
            </div>
        </footer>
    </main>
    <script src="assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="assets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="assets/js/vendors/select2.min.js"></script>
    <script src="assets/js/vendors/perfect-scrollbar.js"></script>
    <script src="assets/js/vendors/jquery.fullscreen.min.js"></script>
    <!-- Main Script -->
    <script src="assets/js/main.js" type="text/javascript"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>







 <!-- <script>
    function validateAndSubmit(event) {
    // Prevent form submission if validation fails
    event.preventDefault();

    // Clear previous error messages
    clearErrors();

    // Get form fields
    const productName = document.getElementById('product_name');
    const category = document.querySelector('[name="category"]');
    const description = document.getElementById('descriptionid');
    const variants = document.querySelectorAll('[id^="ram-"]'); // Select all variant inputs

    // Validation flag
    let isValid = true;

    // Validate Product Name
    if (productName.value.trim() === "") {
        isValid = false;
        displayError('productName-error', 'Product Name is required.');
    }

    // Validate Category
    if (category.value === "") {
        isValid = false;
        displayError('brand-error', 'Category is required.');
    }

    // Validate Description
    if (description.value.trim() === "") {
        isValid = false;
        displayError('description-error', 'Description is required.');
    }

    // Validate Variant Fields
    variants.forEach((variant, index) => {
        const ram = document.getElementById(`ram-${index}`);
        const storage = document.getElementById(`storage-${index}`);
        const processor = document.getElementById(`processor-${index}`);
        const regularPrice = document.getElementById(`regularPrice-${index}`);
        const salePrice = document.getElementById(`salePrice-${index}`);
        const stock = document.getElementById(`stock-${index}`);

        // Validate variant fields
        if (ram.value.trim() === "") {
            isValid = false;
            displayError(`variant-${index}-ram-error`, 'RAM is required.');
        }
        if (storage.value.trim() === "") {
            isValid = false;
            displayError(`variant-${index}-storage-error`, 'Storage is required.');
        }
        if (processor.value.trim() === "") {
            isValid = false;
            displayError(`variant-${index}-processor-error`, 'Processor is required.');
        }
        if (regularPrice.value.trim() === "") {
            isValid = false;
            displayError(`variant-${index}-regularPrice-error`, 'Regular Price is required.');
        }
        if (salePrice.value.trim() === "") {
            isValid = false;
            displayError(`variant-${index}-salePrice-error`, 'Sale Price is required.');
        }
        if (stock.value.trim() === "") {
            isValid = false;
            displayError(`variant-${index}-stock-error`, 'Stock quantity is required.');
        }
    });

    // If valid, submit the form
    if (isValid) {
        document.querySelector('form').submit();
    }
}

// Function to display error messages
function displayError(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.textContent = message;
    errorElement.style.display = 'block';
}

// Function to clear previous error messages
function clearErrors() {
    const errorMessages = document.querySelectorAll('.error-message');
    errorMessages.forEach(error => {
        error.textContent = '';
        error.style.display = 'none';
    });
}

 </script> -->




</body>

</html>


